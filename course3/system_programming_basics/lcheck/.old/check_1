#!/usr/bin/bash +H
# 1'st labwork
# ./1 variant current_testing_script

LC_ALL=C
LANG=C
export LANG LC_ALL

#set -x

# Panic, remove pipes and exit
panic(){
   echo -e "\rerror: $* " >&2 
   echo "Test failed!"
   rm -f -- "$IN_FIFO" "$ERR_FIFO" "$OUT_FIFO" 2>/dev/null
   deleteTempFiles
   deleteTempDir
   exit 1 
}
deleteTempFiles(){
   rm -rf -- "$FILE_NAME" "$DIR_NAME" "$NEW_FILE_NAME" "one" "two" "three" "four" "-p five" 2>/dev/null 
}
deleteTempDir(){
   2> /dev/null rm -rf -- "$PATH_TEST" 
   2> /dev/null rm -- "$PREFIX/tmp/test_${R}_b" "$PREFIX/tmp/test_${R}_a"
}

readWait=1
# Create dir hierarchy
PREFIX="$HOME/lcheck"
[ ! -d "$PREFIX" ] && {
mkdir "$PREFIX" || panic "Unable to create $PREFIX" 
}
[ ! -d "$PREFIX/tmp/" ] && {
mkdir "$PREFIX/tmp/" || panic "Unable to create $PREFIX/tmp/" 
}
# Vars needed 5,8,11.. points
R=$RANDOM
mkdir "$PREFIX/tmp/$R" || panic "Unable to create temp directory"
PATH_TEST="$PREFIX/tmp/$R"
RETURN_DIR="`pwd`"
cd $PATH_TEST
echo "text" > "one"
echo "text" > "two"
echo "text" > "three"
echo "text" > "four"
echo "text" > "-p five"
mkdir testdir
cd $RETURN_DIR
# Remove temporary files
panicWithTmpDel() {
   
   deleteTempFiles
   panic "$*" 
}
panicWithTmpDirDel() {  
   deleteTempDir
   panic "$*" 
}
#Skip six line
skip() { 
   while read -t $readWait trash <&14 ;do : skipping menu ;done
   test -z "$trash" && panic "No menu detected"
} 

checkNExist() {

   echo "$1" >&13 ;
   read -t $readWait MESSAGE <&14 || panic "No requests for input"
   echo "iDoNotExist" >&13 ;
   checkErrs "$1"
}

checkNExistForFuncDel() {

   echo "$1" >&13 ;
   read -t $readWait MESSAGE <&14 || panic "No requests for input"
   sleep 1
   echo "iDoNotExist" >&13 ; 
   sleep 1
   read -t $readWait str <&15 || panic "Incorrect error output. Point $1"
}

checkNExistTwoArgs() {
  
  echo "$1" >&13 ;
  read -t $readWait str
  echo "iDoNotExist" >&13 ;
  read -t $readWait str
  echo "SecondArg" >&13 ;
  
  checkErrs "$1"
}

checkErrs() {
   read -t $readWait str <&15 || panic "Incorrect error output. Point $1"
   read -t $readWait str <&16 || panic "Incorrect error log file. Point $1"
} 

checkConfirmDeleting() {
   echo "yes" >&13
   read -t $readWait str <&14 || panic "Incorrects output. Point $1"
   [[ $str =~ "rm" ]] || panic "Not found confirmation deliting. Point $1"
}

IN_FIFO="$PREFIX/in_fifo"
OUT_FIFO="$PREFIX/out_fifo"
ERR_FIFO="$PREFIX/err_fifo"
USR_ERR="$HOME/lab1_err"

# remove obsolete pipes
rm -- "$IN_FIFO" "$OUT_FIFO" "$ERR_FIFO" &>/dev/null
# create pipes
mkfifo "$IN_FIFO" "$OUT_FIFO" "$ERR_FIFO"  2>/dev/null
# open fifo
exec 13<>"$IN_FIFO" 14<>"$OUT_FIFO" 15<>"$ERR_FIFO" 16<>"$USR_ERR" 

# user's script
<&13 "${2:?no script}" >&14 2>&15 &

pid=$!
#1) Напечатать имя текущего каталога
#-----------------------------------------
func1() {
   echo "$1" >&13
   arg=`/bin/pwd`
   read -t $readWait str <&14 || panic "Incorrect read from fifo. Point $1"
   [ "$str" == "${arg##*/}" ] || panic "Incorrect output. Point $1"
}

#2) Сменить текущий каталог
func2() {
   
   echo -- "$1" >&13
   echo -- "$PATH_TEST" >&13
   read -t 2 str <&15 && panicWithTmpDirDel "Incorrect output. Point $1"
   checkNExist "$1"
}

#3) Напечатать содержимое текущего каталога
#-----------------------------------------
func3() {
   IFS='\n'
   echo "$1" >&13
   for arg in * ; do
      read -t $readWait str <&14 || panic "Incorrect read from fifo. Point $1"   
      [ "$str" == "$arg" ] || panic "Incorrect output. Point $1" 
   done
   IFS=
}

#4) Создать файл
#-----------------------------------------
func4() {
   echo "$1" >&13
   FILE_NAME=$RANDOM
   sleep 1
   read -t $readWait MESSAGE <&14 || panic "No requests for input"
   echo "$FILE_NAME" >&13
   sleep 1 
   [ -f "$FILE_NAME" ] || panicWithTmpDel "Incorrect output. Point $1"
   deleteTempFiles
}

# 5) Удалить файл
#-----------------------------------------
func5() {
   for arg in "*" "-x" "test" "~" ;do
      echo "$1" >&13
      ls $PATH_TEST > "$PREFIX/tmp/test_${R}_a"
      : >> "$PATH_TEST/$arg"
      read -t $readWait MESSAGE <&14 || panic "No requests for input"
      echo "$PATH_TEST/$arg" >&13 
      sleep 1
      checkConfirmDeleting $1/
      skip
      ls $PATH_TEST > "$PREFIX/tmp/test_${R}_b"
      /usr/bin/diff -ru "$PREFIX/tmp/test_${R}_a" "$PREFIX/tmp/test_${R}_b" >& /dev/null || panic "Incorrect output. Point $1"
   done
   #check nonexistant file
   checkNExistForFuncDel "$1"

}
#6) Выйти из программы
#-----------------------------------------
func6() {
   echo "$1" >&13
   ps -o pid | grep "$pid" >/dev/null &&  panic "Incorrect ouput. Point $1" 
}

#7) Создать каталог
#-----------------------------------------
func7() {
  
   echo "$1" >&13
   arg=$RANDOM
   read MESSAGE <&14 || panic "No requests for input"
   sleep 1
   echo "$arg" >&13
   sleep 1
   [ -d "$arg" ] || panic "Incorrect output. Point $1"
   rmdir $arg
}

# 8) Удалить каталог
#-----------------------------------------
func8() {
   for arg in "*" "-x" "test" "~" ;do
      echo "$1" >&13
      ls $PATH_TEST > "$PREFIX/tmp/test_${R}_a"
      mkdir -- "$PATH_TEST/$arg"
      read -t $readWait MESSAGE <&14 || panic "No requests for input"
      echo "$PATH_TEST/$arg" >&13 
      sleep 1
      checkConfirmDeleting $1/
      skip
      ls $PATH_TEST > "$PREFIX/tmp/test_${R}_b"
      /usr/bin/diff -ru "$PREFIX/tmp/test_${R}_a" "$PREFIX/tmp/test_${R}_b" >& /dev/null || panic "Incorrect output. Point $1"
   done
   #check nonexistant file
   checkNExistForFuncDel "$1"
}
#9) Отменить доступ к файлу для всех остальных пользователей
#-----------------------------------------
func9() {
   echo "$1" >&13

   FILE_NAME="$RANDOM"
   : >> "$FILE_NAME"

   echo "$FILE_NAME" >&13
   find . -name "$FILE_NAME" ! -perm -o=r ! -perm -o=w ! -perm -o=x -type f >/dev/null ||
   panic "Incorrect out. Point $1"
   
   rm -- "$FILE_NAME"
   #check nonexistant file
   checkNExist "$1"
}

#10) Отменить право на запись для владельца файла
#-----------------------------------------
#need to do the task more specific
func10() {
   echo "$1"  >&13
   FILE_NAME="$RANDOM"
   > "$FILE_NAME"
   echo "$FILE_NAME" >&13
   find . -name "$FILE_NAME" ! -perm -u=w -type f >/dev/null || panicWithTmpDel "Incorrect out. Point $1"
   deleteTempFiles
   #check nonexistant file
   checkNExist "$1"
}

# 11) Переименовать файл
#-----------------------------------------
func11() {
   for FILE_NAME_B in "-p mv" "test" "*" "?" ;do
      case $FILE_NAME_B in
            "-p mv")
               FILE_NAME_A="mv_l" ;;
            "test")
               FILE_NAME_A="test_l" ;;
            "*")
               FILE_NAME_A="link" ;;
            "?")
               FILE_NAME_A="link2" ;;   
            *)
               panic "Internal error. Contact maintainer." ;;
      esac
      echo "$1"  >&13

      : >> "$PATH_TEST/$FILE_NAME_B"
#      mv -- "$PATH_TEST/$FILE_NAME_B" "$PATH_TEST/$FILE_NAME_A"
#      sleep 1
#      ls -il $PATH_TEST > "$PREFIX/tmp/test_${R}_a"
#      mv -- "$PATH_TEST/$FILE_NAME_A" "$PATH_TEST/$FILE_NAME_B"
     
      echo "$PATH_TEST/$FILE_NAME_B" >&13
      echo "$PATH_TEST/$FILE_NAME_A" >&13
      sleep 1
#      ls -il $PATH_TEST > "$PREFIX/tmp/test_${R}_b"
#     /usr/bin/diff -ru "$PREFIX/tmp/test_${R}_a" "$PREFIX/tmp/test_${R}_b" &> /dev/null || panic "Incorrect output. Point $1"	
      [ ! -f "$PATH_TEST/$FILE_NAME_B" ] && [ -f "$PATH_TEST/$FILE_NAME_A" ] ||  panic "Incorrect output. Point $1"
   done

   #check nonexistant file
   checkNExistTwoArgs "$1"
}

#12) Выдать список работающих пользователей
#-----------------------------------------
func12() {
   echo "$1" >&13
   for arg in `ps -Ao user= | sort | uniq`; do
      read -t $readWait str <&14 || panic "Incorrect read from fifo. Point $1"
      [ "$str" == "$arg" ] || panic "Incorrect output. Point $1"
   done
}

#13) Скопировать файл 
#-----------------------------------------
#have to create files with names: *,?,[,],-a,~a in the test dir
func13() {
   FILE_NAME=$RANDOM
   DIR_NAME=$RANDOM
   > $FILE_NAME
   > '*'
   > '?'
   > '['
   > ']'
   > '-a'
   > '~a'
   > ' '
   mkdir $DIR_NAME

   #full path to full path & new name
   NEW_FILE_NAME=$RANDOM
   echo "$1" >&13
   echo "`pwd`/$FILE_NAME" >&13
   echo "`pwd`/$DIR_NAME/$NEW_FILE_NAME" >&13
   sleep 1
   [ -f "$DIR_NAME/$NEW_FILE_NAME" ] || panicWithTmpDel "Incorrect output. Point $1"
   rm -- "$DIR_NAME/$NEW_FILE_NAME"

   #copy *, ?, [, ], -, ~
   for arg in "*" "?" "[" "]" "-a" "~a" "$FILE_NAME" #" " 
   do
      echo "$1" >&13
      echo "$arg" >&13
      echo "$DIR_NAME" >&13
      sleep 1
   done
   count=`ls -q "$DIR_NAME" | wc -l`
   [ $count == "7" ] || panicWithTmpDel "Incorrect output. Point $1"

   #rm test files and dir
   rm -- '*' '?' '[' ']' '-a' '~a' "$FILE_NAME" 2>/dev/null
   deleteTempFiles
   #check nonexistant file
   checkNExistTwoArgs "$1"
}

# 14) Вывести текущую дату и время #БЕЗ СЕКУНД
#-----------------------------------------
func14() {
   echo "$1" >&13
   read -t $readWait str <&14 || panic "Incorrect read from fifo. Point $1"
   ( date '+%a %b %e %H:%M %Z %Y' | grep "$str" >/dev/null ) || panic "Incorrect output. Point $1"
}

#15) Вывести содержимое файла на экран
#-----------------------------------------
func15() {
   #read -t $readWait str <&15 || panic "Incorrect output. Point $1"
   for arg in "${PATH_TEST}/one" "${PATH_TEST}/two" "${PATH_TEST}/three" "${PATH_TEST}/four" "${PATH_TEST}/-p five"; do
      echo "$1" >&13
      echo "$arg" >&13
      for i in `cat -- "$arg" >/dev/null`; do 
          read -t $readWait str <&14 || panic "Incorrect read from fifo. Point $1"   
          [ "$str" == "$i" ] || panic "Incorrect output. Point $1" 
       done
   done
   
   #check nonexistant file
   echo "$1" >&13 ;
   read -t $readWait MESSAGE <&14 || panic "No requests for input"
   echo "iDoNotExist" >&13 ;
   read -t $readWait str <&15 || panic "Incorrect error output. Point $1"
}

#16) Создать прямую ссылку на файл
#-----------------------------------------
func16() {
   FILE_NAME=$RANDOM
   echo "$1" >&13
   echo "*" >&13
   echo "$FILE_NAME" >&13
   [ `ls -i | grep "^\*$" | awk '{print $1}'` == `ls -i | grep "$FILE_NAME" | awk '{print $1}'` ] || panic "Incorrect output. Point $1"
   #check nonexistant file
   checkNExistTwoArgs "$1"
}

# 17) Удалить ссылку на файл
#-----------------------------------------
func17() {
   for FILE_NAME in "two" "one" "-p five" ;do
      case $FILE_NAME in
            "two")
               LINK_NAME="two_l" ;;
            "one")
               LINK_NAME="-p l" ;;
            *"five")
               LINK_NAME="link" ;;
            "*")
               LINK_NAME="?" ;; 
            *)
               panic "Internal error. Contact maintainer." ;;
      esac
      echo "$1" >&13
      read -t $readWait MESSAGE <&14 || panic "No output message. Point $1"
      ln -s -- "$PATH_TEST/$FILE_NAME" "$PATH_TEST/$LINK_NAME"
      echo "$PATH_TEST/$LINK_NAME" >&13   
      sleep 1
      checkConfirmDeleting $1
      skip
      [ -f "$PATH_TEST/$LINK_NAME" ] && panic "Incorrect output. Point $1"
   done
   
   > $PATH_TEST/ln_test
   echo "$1" >&13
   read -t $readWait MESSAGE <&14 || panic "No output message. Point $1"
   echo "$PATH_TEST/ln_test" >&13
   sleep 1
   [ -f "$PATH_TEST/ln_test" ] || panic "Incorrect output. Point $1"
   read -t $readWait str <&15 || panic "Incorrect error output. Point $1"
   skip   
   #check nonexistant file
   checkNExist "$1"
}

#18) Выполнить введенную команду
#-----------------------------------------
func18() {
   echo "$1" >&13
   read -t $readWait MESSAGE <&14 || panic "No output message"
   echo "ls" >&13
   IFS='\n'
   for arg in *; do
      read -t $readWait str <&14 || panic "Incorrect read from fifo. Point $1"   
      [ "$str" == "$arg" ] || panic "Incorrect output. Point $1_1" 
   done
   IFS=

   echo "$1" >&13
   read -t $readWait MESSAGE <&14 || panic "No output message"
   echo "/usr/bin/pwd" >&13
   read -t $readWait str <&14 || panic "Incorrect read from fifo. Point $1"
   [ "x$str" == "x`/usr/bin/pwd`" ] || panic "Incorrect output. Point $1_2"
}

#19) Удалить каталог вместе с его содержимым
#-----------------------------------------
func19() {
   FILE_NAME=$RANDOM
   DIR_NAME=$RANDOM
   mkdir "$DIR_NAME"
   > "$DIR_NAME/$FILE_NAME"
   > "$FILE_NAME"

   #test *
   echo "$1" >&13
   read -t $readWait MESSAGE <&14 || panic "No output message"
   echo "$DIR_NAME/*" >&13
   sleep 1
   [ -f "$DIR_NAME/$FILE_NAME" ] || panicWithTmpDel "Incorrect output. Point $1"
   skip
   #test file
   echo "$1" >&13
   read -t $readWait MESSAGE <&14 || panic "No output message"
   echo "$FILE_NAME" >&13
   sleep 1
   [ -f "$FILE_NAME" ]  || panicWithTmpDel "Incorrect output. Point $1"
   skip
   #now delete dir
   echo "$1" >&13
   read -t $readWait MESSAGE <&14 || panic "No output message"
   echo "$DIR_NAME" > "$IN_FIFO"
   checkConfirmDeleting $1
   sleep 1
   [ -d "$DIR_NAME" ]  && panicWithTmpDel "Incorrect output. Point $1"
   skip
   deleteTempFiles
   #check nonexistant file
   checkNExistForFuncDel "$1"
}

# 20) Предоставить всем право на запись в файл
#-----------------------------------------
func20() {
   echo "$1" >&13
   echo "${PATH_TEST}/two" >&13
   gfind "$PATH_TEST" -maxdepth 1 -name "two" -perm -222 > /dev/null || panic "Incorrect output. Point $1"
   #check nonexistant file
   checkNExist "$1"
}

#21) Предоставить всем право на запись в каталог
#-----------------------------------------
func21() {
   echo "$1" >&13
   chmod 700 "${PATH_TEST}/testdir"
   #chmod 700 "$PATH_TEST"
   chmod 700 "${PATH_TEST}/two"
   #test *
   echo "${PATH_TEST}/*" >&13
   find $PATH_TEST -perm 700 -type d >/dev/null || panic "Incorrect output. Point $1"

   #test file
   echo "${PATH_TEST}/two" >&13
   find $PATH_TEST -name "two" -perm 700 -type f >/dev/null || panic "Incorrect output. Point $1"

   #test dir
   echo "${PATH_TEST}/testdir" >&13
   find $PATH_TEST -name "testdir" -perm 722 -type d >/dev/null || panic "Incorrect output. Point $1"

   #check nonexistant file
   checkNExist "$1"

}

#22) Убрать всем право на запись в каталог 
#-----------------------------------------
func22() {
   echo "$1" >&13
   chmod 777 "${PATH_TEST}/testdir"
   chmod 777 "$PATH_TEST"
   chmod 777 "${PATH_TEST}/two"
   #test *
   echo "${PATH_TEST}/*" >&13
   find $PATH_TEST -perm 777 -type d >/dev/null || panic "Incorrect output. Point $1"

   #test file
   echo "${PATH_TEST}/two" >&13
   find $PATH_TEST -name "two" -perm 777 -type f >/dev/null || panic "Incorrect output. Point $1"

   #test dir
   echo "${PATH_TEST}/testdir" >&13
   find $PATH_TEST -name "testdir" -perm 555 -type d >/dev/null || panic "Incorrect output. Point $1"

   #check nonexistant file
   checkNExist "$1"
}

# 23) Создать косвенную (символьную) ссылку на файл
#-----------------------------------------
func23() {
   for FILE_NAME in "two" "one" "-p five" ;do
         case $FILE_NAME in
            two)
               LINK_NAME="two_l" ;;
            one)
               LINK_NAME="-p l" ;;
            *five)
               LINK_NAME="link" ;;
            *)
               panic "Internal error. Contact maintainer." ;;
         esac

         echo -e "$1\n$PATH_TEST/$FILE_NAME\n$PATH_TEST/$LINK_NAME" >&13
         [ -n "`gfind -L "$PATH_TEST" -maxdepth 1 \
            -name "$LINK_NAME" -xtype l`" ] ||
            panic "Incorrect output. Point $1"
   done
   # clean
   #unset -- FILE_NAME
   #unset -- LINK_NAME

   #check nonexistant file
   checkNExistTwoArgs "$1"
}

skip
case $1 in
   1) func1 "1" ;skip
      func2 "2" ;skip
      func3 "3" ;skip
      func4 "4" ;skip
      func5 "5"
      func6 "6"
      ;;
   2) func1 "1" ;skip
      func3 "2" ;skip
      func7 "3" ;skip
      func2 "4" ;skip
      func8 "5" ;skip
      func6 "6"
      ;;
   3) func1 "1" ;skip
      func4 "2" ;skip
      func9 "3" ;skip
      func10 "4" ;skip
      func11 "5" ;skip
      func6 "6";;
   4) func1 "1" ;skip
      func2 "2" ;skip
      func12 "3" ;skip
      func4 "4" ;skip
      func13 "5" ;skip
      func6 "6";;
   5) func1 "1" ;skip
      func3 "2" ;skip
      func14 "3" ;skip
      func15 "4" ;skip
      func5 "5" ;
      func6 "6";;
   6) func1 "1" ;skip
      func2 "2" ;skip
      func3 "3" ;skip
      func16 "4" ;skip
      func17 "5" ;
      func6 "6";;
   7) func1 "1" ;skip
      func2 "2" ;skip
      func18 "3" ;skip
      func7 "4" ;skip
      func19 "5" ;
      func6 "6";;
   8) func1 "1" ;skip
      func2 "2" ;skip
      func4 "3" ;skip
      func20 "4" ;skip
      func5 "5" ;
      func6 "6";;
   9) func1 "1" ;skip
      func3 "2" ;skip
      func7 "3" ;skip
      func21 "4" ;skip
      func22 "5" ;skip
      func6 "6";;
   10) func1 "1" ;skip
      func2 "2" ;skip
      func14 "3" ;skip
      func15 "4" ;skip
      func13 "5" ;skip
      func6 "6";;
   11) func1 "1" ;skip
      func2 "2" ;skip
      func3 "3" ;skip
      func23 "4" ;skip
      func18 "5" ;skip
      func6 "6";;
   12) func7 "1" ;skip
      func2 "2" ;skip
      func3 "3" ;skip
      func11 "4" ;skip
      func19 "5" ;
      func6 "6";;
esac

#Remove temporary files
rm "$IN_FIFO" "$OUT_FIFO" "$ERR_FIFO"
deleteTempFiles
deleteTempDir

# close fifo
exec 13<&-
exec 14<&-
exec 15<&-
exec 16<&-

# remove obsolete pipes
rm -f  -- "$IN_FIFO" "$OUT_FIFO" "$ERR_FIFO" &>/dev/null

# check EOF
# create pipes
mkfifo "$OUT_FIFO" 2>/dev/null
# open fifo
exec 14<>"$OUT_FIFO"

# user's script
(
   :| "${2:?no script}" >&14 2>/dev/null &
)

i=0
while read -t $readWait str <&14; do
   (( i++ ))
   [ $i -eq 100 ] && {
   pkill -9 -P $$ -f "$2" &>/dev/null
   panic "do not fucking use while true!!!" 
}
done

# remove temporary files
rm -f "$OUT_FIFO" >/dev/null

# close fifo
exec 14<&-

echo -e "\rTest succeeded!                                     "
